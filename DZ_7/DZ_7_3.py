# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение
# и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class Kletka:
    def __init__(self, kol_kletok):
        self.kol_kletok = kol_kletok

    def __add__(self, other):
        summa = Kletka(self.kol_kletok + other.kol_kletok)
        return Kletka(summa)


    def __sub__(self, other):
        razn = self.kol_kletok - other.kol_kletok
        if razn >= 0:
            return Kletka(razn)
        else:
            print(f'nevernye dannye')

    def __mul__(self, other):
        umnoj = self.kol_kletok * other.kol_kletok
        return Kletka(umnoj)

    def __truediv__(self, other):
        delenie = self.kol_kletok // other.kol_kletok
        return Kletka(delenie)

# это вообще не понял. Списал.
    def make_order(self, count):
        s = ''
        for i in range(self.kol_kletok // count):
            s += '*' * count + '\n'
        s += '*' * (self.kol_kletok % count) + '\n'
        return s

    def __str__(self):
        return f'{self.kol_kletok}'

kletka1 = Kletka(22)
print(kletka1.make_order(8))
kletka2 = Kletka(15)
print((kletka2.make_order(5)))

print(kletka1 + kletka2)
print(kletka1 - kletka2)
print(kletka1 * kletka2)
print(kletka1 / kletka2)

